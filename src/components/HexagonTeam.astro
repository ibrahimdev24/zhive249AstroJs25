---
interface TeamMember {
  name: string;
  role: string;
  bio: string;
  image: string;
  social: {
    email?: string;
    linkedin?: string;
    instagram?: string;
  };
}

interface Props {
  teamMembers: TeamMember[];
}

const { teamMembers } = Astro.props;
---

<div class="relative w-full max-w-[1200px] mx-auto aspect-square flex items-center justify-center" id="hexagon-container">
  <!-- Center Logo -->
  <div class="absolute w-64 h-64 z-10" style="transform: translate(-50%, -50%); left: 50%; top: 50%;">
    <div class="relative w-full h-full flex items-center justify-center">
      <!-- Logo background glow -->
      <div class="absolute inset-0 bg-primary-500/20 rounded-full blur-xl"></div>
      <!-- Logo with subtle animation -->
      <img 
        src="/images/Logo.svg" 
        alt="Zhive249 Logo" 
        class="w-full h-full relative z-10 animate-pulse p-8"
        style="animation-duration: 3s;"
      />
    </div>
  </div>

  <!-- Team Members in Hexagonal Shape -->
  {teamMembers.map((member, index) => {
    return (
      <div
        class="absolute w-48 transition-transform duration-300 hover:scale-110 group team-member z-0"
        data-index={index}
        role="button"
        tabindex="0"
        aria-label={`View ${member.name}'s profile`}
        aria-expanded="false"
        data-member-index={index}
      >
        <div class="relative">
          <div class="w-36 h-36 mx-auto rounded-full overflow-hidden border-4 border-primary-500/20 group-hover:border-primary-500/50 transition-colors duration-300">
            <img
              src={member.image}
              alt={member.name}
              class="w-full h-full object-cover"
            />
          </div>
          <div class="mt-4 text-center">
            <h3 class="text-xl font-semibold text-gray-200">{member.name}</h3>
            <p class="text-md text-gray-400">{member.role}</p>
          </div>
          <div class="absolute inset-0 bg-navy-900/90 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center p-4">
            <div class="text-center">
              <p class="text-sm text-gray-300 mb-4">{member.bio}</p>
              <div class="flex justify-center space-x-4">
                {member.social.email && (
                  <a href={`mailto:${member.social.email}`} class="text-gray-400 hover:text-primary-500">
                    <span class="sr-only">Email</span>
                    <!-- Email Icon -->
                  </a>
                )}
                {member.social.linkedin && (
                  <a href={member.social.linkedin} target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:text-primary-500">
                    <span class="sr-only">LinkedIn</span>
                    <!-- LinkedIn Icon -->
                  </a>
                )}
                {member.social.instagram && (
                  <a href={member.social.instagram} target="_blank" rel="noopener noreferrer" class="text-gray-400 hover:text-primary-500">
                    <span class="sr-only">Instagram</span>
                    <!-- Instagram Icon -->
                  </a>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  })}
</div>

<script>
  import gsap from 'gsap';

  // Initialize rotation animation
  const container = document.getElementById('hexagon-container');
  const teamMembers = container?.querySelectorAll('.team-member');
  const centerX = container?.offsetWidth ? container.offsetWidth / 2 : 0;
  const centerY = container?.offsetHeight ? container.offsetHeight / 2 : 0;
  const radius = Math.min(centerX, centerY) * 0.47;

  // Optimize animations with will-change and reduced calculations
  const masterTl = gsap.timeline({
    repeat: -1,
    defaults: { ease: "none" }
  });

  // Pre-calculate angles and positions
  const teamMembersArray = teamMembers ? Array.from(teamMembers) : [];
  const angles: number[] = teamMembersArray.map((_, i: number) => (i * 60 - 90) * (Math.PI / 180));
  const positions: { x: number, y: number }[] = new Array(teamMembersArray.length);

  // Position and animate each team member
  teamMembers?.forEach((member, i) => {
    // Set initial will-change property
    gsap.set(member, { willChange: 'transform' });

    // Create individual timeline for each member
    const tl = gsap.timeline();
    
    // Optimized animation with cached calculations
    tl.to(member, {
      duration: 40,
      ease: "none",
      onUpdate: function() {
        const progress = this.progress();
        const currentAngle = angles[i] + (progress * Math.PI * 2);
        positions[i] = {
          x: centerX + radius * Math.cos(currentAngle),
          y: centerY + radius * Math.sin(currentAngle)
        };
        
        gsap.set(member, {
          x: positions[i].x - centerX,
          y: positions[i].y - centerY,
          rotation: 0
        });
      }
    });

    // Add to master timeline
    masterTl.add(tl, 0);

    // Add hover and touch effects with scale and slight glow
    const activateMember = () => {
      gsap.to(member, {
        scale: 1.1,
        filter: 'drop-shadow(0 0 10px rgba(var(--color-primary-500), 0.3))',
        duration: 0.3,
        ease: "power2.out",
        zIndex: 20
      });
    };

    const deactivateMember = () => {
      gsap.to(member, {
        scale: 1,
        filter: 'none',
        duration: 0.3,
        ease: "power2.out",
        zIndex: 0
      });
    };

    // Mouse events
    member.addEventListener('mouseenter', activateMember);
    member.addEventListener('mouseleave', deactivateMember);

    // Touch events
    member.addEventListener('touchstart', (e) => {
      e.preventDefault();
      // Deactivate all other members
      teamMembers?.forEach(m => {
        if (m !== member) deactivateMember.call(m);
      });
      activateMember();
    });

    // Handle touch outside
    document.addEventListener('touchstart', (e) => {
      const target = e.target as Node;
      if (!member.contains(target)) {
        deactivateMember();
      }
    }, { passive: true });
  });

  // Add keyboard event listeners
  teamMembers?.forEach((member) => {
    member.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        const memberElement = e.currentTarget as HTMLElement;
        gsap.to(memberElement, {
          scale: 1.1,
          filter: 'drop-shadow(0 0 10px rgba(var(--color-primary-500), 0.3))',
          duration: 0.3,
          ease: "power2.out",
          zIndex: 20
        });
      }
    });
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    const newCenterX = container?.offsetWidth ? container.offsetWidth / 2 : 0;
    const newCenterY = container?.offsetHeight ? container.offsetHeight / 2 : 0;
    const newRadius = Math.min(newCenterX, newCenterY) * 0.47;

    // Update the radius and center point for all animations
    teamMembers?.forEach((member, i) => {
      const tweens = gsap.getTweensOf(member);
      tweens.forEach((tween) => {
        if (tween.vars.onUpdate) {
          tween.vars.onUpdate();
        }
      });
    });
  });
</script>