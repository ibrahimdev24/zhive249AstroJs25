---
type Props = {
  index: number;
  title: string;
  description: string;
};

const { index, title, description } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item group h-[160px] bg-dark-400/30 overflow-hidden w-full transition-all duration-500 mb-[30px] rounded-[45px] border border-primary-500/10 shadow-[0px_5px_0px_rgba(34,197,94,0.1)] text-white"
>
  <button
    class="accordion__toggle w-full h-[160px] flex items-center justify-between p-[60px] cursor-pointer"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  >
    <div class="flex items-center gap-[25px]">
      <span class="hidden sm:block sm:text-6xl text-primary-500/50">0{index}</span>
      <span class="text-xl font-medium">{title}</span>
    </div>
    <div
      class="bg-dark-500/50 w-[58px] h-[58px] flex justify-center items-center rounded-full border border-primary-500/20 group-hover:bg-primary-500/10 transition-colors duration-300"
    >
      <div
        class="accordion__icon h-10 w-10 transition-transform duration-300 flex justify-center items-center relative"
        aria-hidden="true"
      >
      </div>
    </div>
  </button>
  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button `}
    class="accordion__content px-[60px]"
  >
    <div class="w-full h-[2px] bg-primary-500/20"></div>
    <p class="prose text-dark-300 mb-4 mt-1 max-w-full pt-5 pb-[60px] transition-[height]">
      {description}
    </p>
  </div>
</div>

<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(
      ".accordion__item"
    ) as NodeListOf<HTMLElement>;

    accordionItems.forEach((item) => {
      const toggle = item.querySelector(".accordion__toggle") as HTMLElement;
      const icon = item.querySelector(".accordion__icon") as HTMLElement;
      const content = item.querySelector(".accordion__content") as HTMLElement;

      if (!toggle || !icon || !content) return;

      toggle.addEventListener("click", () => {
        const isExpanded = toggle.getAttribute("aria-expanded") === "true";
        
        // Reset all items
        accordionItems.forEach((otherItem) => {
          if (otherItem !== item) {
            const otherToggle = otherItem.querySelector(".accordion__toggle");
            const otherIcon = otherItem.querySelector(".accordion__icon") as HTMLElement;
            otherItem.style.height = "160px";
            otherToggle?.setAttribute("aria-expanded", "false");
            if (otherIcon) {
              otherIcon.style.transform = "rotate(0deg)";
            }
          }
        });

        // Toggle current item
        if (isExpanded) {
          item.style.height = "160px";
          toggle.setAttribute("aria-expanded", "false");
          icon.style.transform = "rotate(0deg)";
        } else {
          const contentHeight = content.scrollHeight;
          item.style.height = `${contentHeight + 160}px`;
          toggle.setAttribute("aria-expanded", "true");
          icon.style.transform = "rotate(45deg)";
        }
      });

      // Create and style the plus icon
      const horizontalLine = document.createElement("div");
      horizontalLine.className = "absolute w-6 h-0.5 bg-primary-500 group-hover:bg-primary-400 transition-colors duration-300";
      
      const verticalLine = document.createElement("div");
      verticalLine.className = "absolute w-0.5 h-6 bg-primary-500 group-hover:bg-primary-400 transition-colors duration-300";
      
      icon.appendChild(horizontalLine);
      icon.appendChild(verticalLine);
    });
  }

  // Run setup on initial load
  accordionSetup();

  // Run setup when Astro swaps pages
  document.addEventListener("astro:page-load", accordionSetup);
</script>